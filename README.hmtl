<p>NLSIC stands for "Non-linear Least Squares with Inequality Constraints". This algorithm was first published in Sokol et al. (2012) &lt;<a href="doi:10.1093/bioinformatics/btr716">doi:10.1093/bioinformatics/btr716</a>&gt;. His advantage is in combination of the following features:</p>
<blockquote>
<ul>
<li>Jacobi matrix <span class="math inline"><em>J</em></span> is not squared, i.e. <span class="math inline"><em>J</em><sup><em>t</em></sup><em>J</em></span> is not calculated, thus preserving the solution from condition number degradation. Instead QR decomposition is used;</li>
<li>taking into account inequality constraints is based on a well known NNLS algorithm;</li>
<li>convergence in non-linear iterations is globalized by back-tracking method. I.e. with enough iterations, the process will reach a convergence point but no guaranty is given that it will be a global minimum;</li>
<li>if <span class="math inline"><em>J</em></span> is rank deficient, a least norm (also known as "minimum norm") increment is used. To find such increment exactly (not just a regularized one) in presence of inequality constraints is not a trivial task. We use our own algorithm implemented in <code>lsi_ln(...)</code> function;</li>
<li>if an initial approximation for a solution vector is outside of feasibility domain (FD) defined by inequality constraints then it is first projected on the FD (cf. <code>ldp(...)</code>) and the non-linear iterations start afterward.</li>
</ul>
</blockquote>
<p>This python version is an adaptation of the R one which is distributed with influx_si software. The original R version is in advance on this one. So users desiring to catch with the latest developments are invited to switch to R version.</p>
<p>The main function to call is <code>nlsic(...)</code>.</p>
